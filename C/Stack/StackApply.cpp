//中缀表达式
//前缀表达式--波兰表达式  运算符在两个操作数前面  
//中缀转前缀


//后缀表达式--逆波兰表达式 运算符在两个操作数后面
//中缀转后缀 按照左优先原则
// 后缀表达式的手算方法：
// 从左往右扫描，每遇到一个运算符，就让运算符前面最近的两个操作数执行对应运算，
// 合体为一个操作数
((15 ÷ (7 − (1 + 1))) × 3) − (2 + (1 + 1))
15 7 1 1 + - ÷ 3 × 2 1 1 + + -

A + B * (C - D) – E / F
A B C D - * + E F / -

A + B - C * D / E + F
A B + C D * E / - F +

①从左往右扫描下一个元素，直到处理完所有元素
②若扫描到操作数则压入栈，并回到①；否则执行③ 
③若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到①

先出栈的是“右操作数”



初始化一个栈，用于保存暂时还不能确定运算顺序的运算符。
从左到右处理各个元素，直到末尾。可能遇到三种情况：
① 遇到操作数。直接加入后缀表达式。
② 遇到界限符。遇到“(”直接入栈；遇到“)”则依次弹出栈内运算符并加入后缀表达式，直到
弹出“(”为止。注意：“(”不加入后缀表达式。
③ 遇到运算符。依次弹出栈中优先级高于或等于当前运算符的所有运算符，并加入后缀表达式，
若碰到“(” 或栈空则停止。之后再把当前运算符入栈。
按上述方法处理完所有字符后，将栈中剩余运算符依次弹出，并加入后缀表达式。